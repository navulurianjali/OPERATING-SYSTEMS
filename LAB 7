#include <stdio.h>
#include <stdlib.h>

struct Process {
    int id;
    int burst_time;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
};

void calculateTimes(struct Process processes[], int n) {
    int total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wt += processes[i].waiting_time;
        total_tat += processes[i].turnaround_time;
    }
    printf("Average Waiting Time: %.2f\n", (float)total_wt / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_tat / n);
}

void nonPreemptiveSJF(struct Process processes[], int n) {
    int completed = 0, current_time = 0;
    int remaining_burst_time[n];
    
    for (int i = 0; i < n; i++) {
        remaining_burst_time[i] = processes[i].burst_time;
    }

    while (completed != n) {
        int shortest = -1;
        int min_burst = 999999;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && remaining_burst_time[i] > 0 && processes[i].burst_time < min_burst) {
                min_burst = processes[i].burst_time;
                shortest = i;
            }
        }
        
        if (shortest != -1) {
            remaining_burst_time[shortest]--;
            if (remaining_burst_time[shortest] == 0) {
                completed++;
                processes[shortest].turnaround_time = current_time - processes[shortest].arrival_time + 1;
                processes[shortest].waiting_time = processes[shortest].turnaround_time - processes[shortest].burst_time;
            }
        }
        current_time++;
    }

    calculateTimes(processes, n);
}

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    struct Process processes[n];
    
    for (int i = 0; i < n; i++) {
        printf("Enter burst time and arrival time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].burst_time, &processes[i].arrival_time);
        processes[i].id = i + 1;
    }

    nonPreemptiveSJF(processes, n);
    return 0;
}
