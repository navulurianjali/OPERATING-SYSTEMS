#include <stdio.h>

struct priority_scheduling {
    char process_name;
    int burst_time;
    int waiting_time;
    int turn_around_time;
    int priority;
};

int main() {
    int number_of_process;
    int total_waiting_time = 0, total_turnaround_time = 0;
    int ASCII_number = 65; 
    float average_waiting_time, average_turnaround_time;

    printf("Enter the total number of Processes: ");
    scanf("%d", &number_of_process);

    struct priority_scheduling process[number_of_process];

    printf("\nPlease Enter the Burst Time and Priority of each process:\n");
    for (int i = 0; i < number_of_process; i++) {
        process[i].process_name = (char)ASCII_number; // Assign process names
        printf("\nEnter the details of Process %c\n", process[i].process_name);
        printf("Enter the Burst Time: ");
        scanf("%d", &process[i].burst_time);
        printf("Enter the Priority: ");
        scanf("%d", &process[i].priority);
        ASCII_number++;
    }

    for (int i = 0; i < number_of_process - 1; i++) {
        int position = i;
        for (int j = i + 1; j < number_of_process; j++) {
            if (process[j].priority > process[position].priority) {
                position = j;
            }
        }
        struct priority_scheduling temp_process = process[i];
        process[i] = process[position];
        process[position] = temp_process;
    }

    // Calculate waiting time
    process[0].waiting_time = 0; // First process has no waiting time
    for (int i = 1; i < number_of_process; i++) {
        process[i].waiting_time = 0;
        for (int j = 0; j < i; j++) {
            process[i].waiting_time += process[j].burst_time;
        }
        total_waiting_time += process[i].waiting_time;
    }

    for (int i = 0; i < number_of_process; i++) {
        process[i].turn_around_time = process[i].burst_time + process[i].waiting_time;
        total_turnaround_time += process[i].turn_around_time;
    }

    average_waiting_time = (float)total_waiting_time / (float)number_of_process;
    average_turnaround_time = (float)total_turnaround_time / (float)number_of_process;

    printf("\n\nProcess Name\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < number_of_process; i++) {
        printf("%c\t\t%d\t\t%d\t\t%d\t\t%d\n",
               process[i].process_name,
               process[i].burst_time,
               process[i].priority,
               process[i].waiting_time,
               process[i].turn_around_time);
    }

    printf("\nAverage Waiting Time: %.2f", average_waiting_time);
    printf("\nAverage Turnaround Time: %.2f\n", average_turnaround_time);

    return 0;
}
